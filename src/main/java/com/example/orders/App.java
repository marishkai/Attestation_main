package com.example.orders;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class App {
    private static int newProductId;
    private static int newCustomerId;
    private static int newOrderId;

    public static void main(String[] args) {
        printHeader("üöÄ –ó–ê–ü–£–°–ö JAVA-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê–ú–ò");

        try {
            DatabaseManager dbManager = DatabaseManager.fromProperties();
            printSuccess("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

            // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Flyway
            printInfo("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
            dbManager.migrate();
            printSuccess("–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");

            // –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRUD –û–ü–ï–†–ê–¶–ò–ô
            demonstrateCRUDOperations(dbManager);

            // –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• SQL-–ó–ê–ü–†–û–°–û–í
            executeTestSQLQueries(dbManager);

        } catch (Exception e) {
            printError("–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }

        printHeader("–í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–û");
    }

    private static void demonstrateCRUDOperations(DatabaseManager dbManager) {
        Connection connection = null;
        try {
            connection = dbManager.getConnection();
            connection.setAutoCommit(false); // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

            printHeader("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRUD –û–ü–ï–†–ê–¶–ò–ô –ß–ï–†–ï–ó JAVA");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            printHeader("üìä –ò–°–•–û–î–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•");
            showInitialState(connection);

            printHeader("1. CREATE - –í–°–¢–ê–í–ö–ê –ù–û–í–û–ì–û –¢–û–í–ê–†–ê –ò –ü–û–ö–£–ü–ê–¢–ï–õ–Ø");

            // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            printInfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...");
            newProductId = insertNewProduct(connection);
            printSuccess("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä ID: " + newProductId + " - –ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å PlayStation 5");

            // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            printInfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...");
            newCustomerId = insertNewCustomer(connection);
            printSuccess("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ID: " + newCustomerId + " - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–æ–≤–∏–∫–æ–≤");

            printHeader("2. CREATE - –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê –î–õ–Ø –ü–û–ö–£–ü–ê–¢–ï–õ–Ø");
            printInfo("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...");
            newOrderId = createNewOrder(connection, newCustomerId, newProductId);
            printSuccess("‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: " + newOrderId + " - PlayStation 5 –¥–ª—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–æ–≤–∏–∫–æ–≤–∞");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            printHeader("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –î–ê–ù–ù–´–•");
            showDataAfterCreation(connection);

            printHeader("3. READ - –ß–¢–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• 5 –ó–ê–ö–ê–ó–û–í");
            readLast5Orders(connection);

            printHeader("4. UPDATE - –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            printInfo("–°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
            showProductBeforeUpdate(connection, 1);

            updateProductPriceAndQuantity(connection);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            printInfo("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
            showProductAfterUpdate(connection, 1);

            printHeader("5. DELETE - –£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ó–ê–ü–ò–°–ï–ô");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            printInfo("–î–∞–Ω–Ω—ã–µ –î–û —É–¥–∞–ª–µ–Ω–∏—è:");
            showDataBeforeDeletion(connection);

            deleteTestData(connection, newOrderId, newCustomerId, newProductId);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            printInfo("–î–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è:");
            showDataAfterDeletion(connection);

            connection.commit(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            printSuccess("‚úÖ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");

        } catch (Exception e) {
            if (connection != null) {
                try {
                    connection.rollback();
                    printError("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: " + e.getMessage());
                } catch (SQLException ex) {
                    printError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + ex.getMessage());
                }
            }
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    printError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + e.getMessage());
                }
            }
        }
    }

    private static void showInitialState(Connection connection) throws SQLException {
        String countSql = "SELECT " +
                "(SELECT COUNT(*) FROM products) as products_count, " +
                "(SELECT COUNT(*) FROM customer) as customers_count, " +
                "(SELECT COUNT(*) FROM orders) as orders_count";

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(countSql)) {
            if (rs.next()) {
                System.out.println("üì¶ –¢–æ–≤–∞—Ä–æ–≤: " + rs.getInt("products_count"));
                System.out.println("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: " + rs.getInt("customers_count"));
                System.out.println("üìã –ó–∞–∫–∞–∑–æ–≤: " + rs.getInt("orders_count"));
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        System.out.println("\nüìã –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤:");
        String productsSql = "SELECT id, description, price, quantity FROM products ORDER BY id LIMIT 3";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(productsSql)) {
            while (rs.next()) {
                System.out.println("   ID " + rs.getInt("id") + ": " +
                        rs.getString("description") + " | –¶–µ–Ω–∞: " + rs.getDouble("price") +
                        " | –ö–æ–ª-–≤–æ: " + rs.getInt("quantity"));
            }
        }
    }

    private static void showDataAfterCreation(Connection connection) throws SQLException {
        String sql = "SELECT " +
                "(SELECT description FROM products WHERE id = ?) as product_name, " +
                "(SELECT first_name || ' ' || last_name FROM customer WHERE id = ?) as customer_name, " +
                "(SELECT COUNT(*) FROM orders WHERE id = ?) as order_exists";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, newProductId);
            stmt.setInt(2, newCustomerId);
            stmt.setInt(3, newOrderId);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üÜï –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: " + rs.getString("product_name"));
                    System.out.println("üÜï –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: " + rs.getString("customer_name"));
                    System.out.println("üÜï –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: " + (rs.getInt("order_exists") > 0 ? "–î–∞" : "–ù–µ—Ç"));
                }
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        String countSql = "SELECT " +
                "(SELECT COUNT(*) FROM products) as products_count, " +
                "(SELECT COUNT(*) FROM customer) as customers_count, " +
                "(SELECT COUNT(*) FROM orders) as orders_count";

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(countSql)) {
            if (rs.next()) {
                System.out.println("\nüìä –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:");
                System.out.println("üì¶ –¢–æ–≤–∞—Ä–æ–≤: " + rs.getInt("products_count"));
                System.out.println("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: " + rs.getInt("customers_count"));
                System.out.println("üìã –ó–∞–∫–∞–∑–æ–≤: " + rs.getInt("orders_count"));
            }
        }
    }

    private static void showProductBeforeUpdate(Connection connection, int productId) throws SQLException {
        String sql = "SELECT description, price, quantity FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, productId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üìä –¢–æ–≤–∞—Ä ID " + productId + ": " +
                            rs.getString("description") + " | " +
                            "–¶–µ–Ω–∞: " + rs.getDouble("price") + " | " +
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + rs.getInt("quantity"));
                }
            }
        }
    }

    private static void showProductAfterUpdate(Connection connection, int productId) throws SQLException {
        String sql = "SELECT description, price, quantity FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, productId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üìä –¢–æ–≤–∞—Ä ID " + productId + ": " +
                            rs.getString("description") + " | " +
                            "–¶–µ–Ω–∞: " + rs.getDouble("price") + " | " +
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + rs.getInt("quantity"));
                }
            }
        }
    }

    private static void showDataBeforeDeletion(Connection connection) throws SQLException {
        String sql = "SELECT " +
                "(SELECT COUNT(*) FROM products WHERE id = ?) as product_exists, " +
                "(SELECT COUNT(*) FROM customer WHERE id = ?) as customer_exists, " +
                "(SELECT COUNT(*) FROM orders WHERE id = ?) as order_exists";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, newProductId);
            stmt.setInt(2, newCustomerId);
            stmt.setInt(3, newOrderId);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üóëÔ∏è –¢–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (rs.getInt("product_exists") > 0 ? "–î–∞" : "–ù–µ—Ç"));
                    System.out.println("üóëÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (rs.getInt("customer_exists") > 0 ? "–î–∞" : "–ù–µ—Ç"));
                    System.out.println("üóëÔ∏è –ó–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (rs.getInt("order_exists") > 0 ? "–î–∞" : "–ù–µ—Ç"));
                }
            }
        }
    }

    private static void showDataAfterDeletion(Connection connection) throws SQLException {
        String sql = "SELECT " +
                "(SELECT COUNT(*) FROM products WHERE id = ?) as product_exists, " +
                "(SELECT COUNT(*) FROM customer WHERE id = ?) as customer_exists, " +
                "(SELECT COUNT(*) FROM orders WHERE id = ?) as order_exists";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, newProductId);
            stmt.setInt(2, newCustomerId);
            stmt.setInt(3, newOrderId);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üóëÔ∏è –¢–æ–≤–∞—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + (rs.getInt("product_exists") > 0 ? "–û—Å—Ç–∞–ª—Å—è" : "–£–¥–∞–ª–µ–Ω"));
                    System.out.println("üóëÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + (rs.getInt("customer_exists") > 0 ? "–û—Å—Ç–∞–ª—Å—è" : "–£–¥–∞–ª–µ–Ω"));
                    System.out.println("üóëÔ∏è –ó–∞–∫–∞–∑ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + (rs.getInt("order_exists") > 0 ? "–û—Å—Ç–∞–ª—Å—è" : "–£–¥–∞–ª–µ–Ω"));
                }
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        String countSql = "SELECT " +
                "(SELECT COUNT(*) FROM products) as products_count, " +
                "(SELECT COUNT(*) FROM customer) as customers_count, " +
                "(SELECT COUNT(*) FROM orders) as orders_count";

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(countSql)) {
            if (rs.next()) {
                System.out.println("\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:");
                System.out.println("üì¶ –¢–æ–≤–∞—Ä–æ–≤: " + rs.getInt("products_count"));
                System.out.println("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: " + rs.getInt("customers_count"));
                System.out.println("üìã –ó–∞–∫–∞–∑–æ–≤: " + rs.getInt("orders_count"));
            }
        }
    }

    private static int insertNewProduct(Connection connection) throws SQLException {
        String getMaxIdSql = "SELECT COALESCE(MAX(id), 0) + 1 as next_id FROM products";
        int nextId;

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(getMaxIdSql)) {
            if (rs.next()) {
                nextId = rs.getInt("next_id");
            } else {
                throw new SQLException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è —Ç–æ–≤–∞—Ä–∞");
            }
        }

        String sql = "INSERT INTO products (id, description, price, quantity, category) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, nextId);
            stmt.setString(2, "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å PlayStation 5");
            stmt.setDouble(3, 49999.99);
            stmt.setInt(4, 5);
            stmt.setString(5, "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞");

            stmt.executeUpdate();
            return nextId;
        }
    }

    private static int insertNewCustomer(Connection connection) throws SQLException {
        String getMaxIdSql = "SELECT COALESCE(MAX(id), 0) + 1 as next_id FROM customer";
        int nextId;

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(getMaxIdSql)) {
            if (rs.next()) {
                nextId = rs.getInt("next_id");
            } else {
                throw new SQLException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
            }
        }

        String sql = "INSERT INTO customer (id, first_name, last_name, phone, email) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, nextId);
            stmt.setString(2, "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä");
            stmt.setString(3, "–ù–æ–≤–∏–∫–æ–≤");
            stmt.setString(4, "+7-999-123-45-67");
            stmt.setString(5, "alex.novikov@mail.ru");

            stmt.executeUpdate();
            return nextId;
        }
    }

    private static int createNewOrder(Connection connection, int customerId, int productId) throws SQLException {
        String getMaxIdSql = "SELECT COALESCE(MAX(id), 0) + 1 as next_id FROM orders";
        int nextId;

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(getMaxIdSql)) {
            if (rs.next()) {
                nextId = rs.getInt("next_id");
            } else {
                throw new SQLException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞");
            }
        }

        String sql = "INSERT INTO orders (id, product_id, customer_id, order_date, quantity, status_id) VALUES (?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, nextId);
            stmt.setInt(2, productId);
            stmt.setInt(3, customerId);
            stmt.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()));
            stmt.setInt(5, 1);
            stmt.setInt(6, 1); // –°—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–π"

            stmt.executeUpdate();
            return nextId;
        }
    }

    private static void readLast5Orders(Connection connection) throws SQLException {
        String sql = """
            SELECT o.id, o.order_date, c.first_name, c.last_name, p.description, p.price, o.quantity, os.status_name
            FROM orders o
            JOIN customer c ON o.customer_id = c.id
            JOIN products p ON o.product_id = p.id
            JOIN order_status os ON o.status_id = os.id
            ORDER BY o.order_date DESC
            LIMIT 5
            """;

        try (PreparedStatement stmt = connection.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            System.out.println("‚îÇ ID  ‚îÇ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞        ‚îÇ –ò–º—è        ‚îÇ –§–∞–º–∏–ª–∏—è     ‚îÇ –¢–æ–≤–∞—Ä                        ‚îÇ –¶–µ–Ω–∞       ‚îÇ –ö–æ–ª-–≤–æ   ‚îÇ –°—Ç–∞—Ç—É—Å       ‚îÇ");
            System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");

            while (rs.next()) {
                System.out.printf("‚îÇ %-3d ‚îÇ %-19s ‚îÇ %-10s ‚îÇ %-11s ‚îÇ %-28s ‚îÇ %-10.2f ‚îÇ %-8d ‚îÇ %-12s ‚îÇ%n",
                        rs.getInt("id"),
                        rs.getTimestamp("order_date").toString().substring(0, 19),
                        rs.getString("first_name"),
                        rs.getString("last_name"),
                        rs.getString("description").length() > 28 ?
                                rs.getString("description").substring(0, 25) + "..." : rs.getString("description"),
                        rs.getDouble("price"),
                        rs.getInt("quantity"),
                        rs.getString("status_name")
                );
            }
            System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        }
    }

    private static void updateProductPriceAndQuantity(Connection connection) throws SQLException {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
        String updatePriceSql = "UPDATE products SET price = price * 1.15 WHERE category = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' AND id > 10";
        try (PreparedStatement stmt = connection.prepareStatement(updatePriceSql)) {
            int updatedRows = stmt.executeUpdate();
            printSuccess("–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω –¥–ª—è " + updatedRows + " —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' (+15%)");
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        String updateQuantitySql = "UPDATE products SET quantity = quantity - 1 WHERE id = 1";
        try (PreparedStatement stmt = connection.prepareStatement(updateQuantitySql)) {
            int updatedRows = stmt.executeUpdate();
            if (updatedRows > 0) {
                printSuccess("–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ID=1 (—É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 1)");
            } else {
                printInfo("–¢–æ–≤–∞—Ä ID=1 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞");
            }
        }
    }

    private static void deleteTestData(Connection connection, int orderId, int customerId, int productId) throws SQLException {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        String deleteOrderSql = "DELETE FROM orders WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(deleteOrderSql)) {
            stmt.setInt(1, orderId);
            int deletedRows = stmt.executeUpdate();
            if (deletedRows > 0) {
                printSuccess("‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ID: " + orderId);
            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        String deleteCustomerSql = "DELETE FROM customer WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(deleteCustomerSql)) {
            stmt.setInt(1, customerId);
            int deletedRows = stmt.executeUpdate();
            if (deletedRows > 0) {
                printSuccess("‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ID: " + customerId);
            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        String deleteProductSql = "DELETE FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(deleteProductSql)) {
            stmt.setInt(1, productId);
            int deletedRows = stmt.executeUpdate();
            if (deletedRows > 0) {
                printSuccess("‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä ID: " + productId);
            }
        }
    }

    private static void executeTestSQLQueries(DatabaseManager dbManager) {
        printHeader("üìä –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• SQL-–ó–ê–ü–†–û–°–û–í");

        try (Connection connection = dbManager.getConnection()) {

            List<TestQuery> queries = createTestQueries();
            printSuccess("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " + queries.size());

            int executedQueries = 0;
            for (TestQuery query : queries) {
                printQueryHeader(query.number, query.description);
                System.out.println("SQL: " + query.sql);
                printSeparator();

                // –î–ª—è UPDATE –∏ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ
                if (query.sql.toUpperCase().startsWith("UPDATE") || query.sql.toUpperCase().startsWith("DELETE")) {
                    showStateBeforeQuery(connection, query);
                }

                executeSingleQuery(connection, query);

                // –î–ª—è UPDATE –∏ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ
                if (query.sql.toUpperCase().startsWith("UPDATE") || query.sql.toUpperCase().startsWith("DELETE")) {
                    showStateAfterQuery(connection, query);
                }

                executedQueries++;

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
                try { Thread.sleep(300); } catch (InterruptedException e) {}
            }

            printSuccess("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " + executedQueries + " –∏–∑ " + queries.size());

        } catch (Exception e) {
            printError("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: " + e.getMessage());
        }
    }

    private static void showStateBeforeQuery(Connection connection, TestQuery query) throws SQLException {
        if (query.number == 6) { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:");
            showProductState(connection, 1);
        }
        else if (query.number == 7) { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:");
            showOrderState(connection, 1);
        }
        else if (query.number == 8) { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:");
            showElectronicsPrices(connection);
        }
        else if (query.number == 9) { // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –£–î–ê–õ–ï–ù–ò–Ø:");
            showSmallQuantityOrders(connection);
        }
        else if (query.number == 10) { // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –£–î–ê–õ–ï–ù–ò–Ø:");
            showZeroQuantityProducts(connection);
        }
    }

    private static void showStateAfterQuery(Connection connection, TestQuery query) throws SQLException {
        if (query.number == 6) { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:");
            showProductState(connection, 1);
        }
        else if (query.number == 7) { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:");
            showOrderState(connection, 1);
        }
        else if (query.number == 8) { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:");
            showElectronicsPrices(connection);
        }
        else if (query.number == 9) { // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø:");
            showSmallQuantityOrders(connection);
        }
        else if (query.number == 10) { // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
            System.out.println("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø:");
            showZeroQuantityProducts(connection);
        }
    }

    private static void showProductState(Connection connection, int productId) throws SQLException {
        String sql = "SELECT description, price, quantity FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, productId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üì¶ –¢–æ–≤–∞—Ä ID " + productId + ": " +
                            rs.getString("description") + " | " +
                            "–¶–µ–Ω–∞: " + rs.getDouble("price") + " | " +
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + rs.getInt("quantity"));
                }
            }
        }
    }

    private static void showOrderState(Connection connection, int orderId) throws SQLException {
        String sql = """
            SELECT o.id, os.status_name, o.order_date, c.first_name, c.last_name, p.description 
            FROM orders o 
            JOIN order_status os ON o.status_id = os.id 
            JOIN customer c ON o.customer_id = c.id 
            JOIN products p ON o.product_id = p.id 
            WHERE o.id = ?
            """;
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, orderId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("üìã –ó–∞–∫–∞–∑ ID " + orderId + ": " +
                            rs.getString("first_name") + " " + rs.getString("last_name") + " | " +
                            rs.getString("description") + " | " +
                            "–°—Ç–∞—Ç—É—Å: " + rs.getString("status_name") + " | " +
                            "–î–∞—Ç–∞: " + rs.getTimestamp("order_date").toString().substring(0, 19));
                }
            }
        }
    }

    private static void showElectronicsPrices(Connection connection) throws SQLException {
        String sql = "SELECT description, price FROM products WHERE category = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' ORDER BY id";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            System.out.println("üí∞ –¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞':");
            while (rs.next()) {
                System.out.println("   " + rs.getString("description") + " | –¶–µ–Ω–∞: " + rs.getDouble("price"));
            }
        }
    }

    private static void showSmallQuantityOrders(Connection connection) throws SQLException {
        String sql = "SELECT COUNT(*) as count FROM orders WHERE quantity = 1 AND id > 15";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                System.out.println("üìã –ó–∞–∫–∞–∑–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1 –∏ ID > 15: " + rs.getInt("count"));
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        String detailsSql = "SELECT o.id, o.quantity, c.first_name, c.last_name, p.description " +
                "FROM orders o " +
                "JOIN customer c ON o.customer_id = c.id " +
                "JOIN products p ON o.product_id = p.id " +
                "WHERE o.quantity = 1 AND o.id > 15 " +
                "ORDER BY o.id";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(detailsSql)) {
            while (rs.next()) {
                System.out.println("   –ó–∞–∫–∞–∑ ID " + rs.getInt("id") + ": " +
                        rs.getString("first_name") + " " + rs.getString("last_name") + " | " +
                        rs.getString("description") + " | –ö–æ–ª-–≤–æ: " + rs.getInt("quantity"));
            }
        }
    }

    private static void showZeroQuantityProducts(Connection connection) throws SQLException {
        String sql = "SELECT COUNT(*) as count FROM products WHERE quantity = 0";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                System.out.println("üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º: " + rs.getInt("count"));
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        String detailsSql = "SELECT id, description, quantity FROM products WHERE quantity = 0 ORDER BY id";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(detailsSql)) {
            while (rs.next()) {
                System.out.println("   –¢–æ–≤–∞—Ä ID " + rs.getInt("id") + ": " +
                        rs.getString("description") + " | –ö–æ–ª-–≤–æ: " + rs.getInt("quantity"));
            }
        }
    }

    private static List<TestQuery> createTestQueries() {
        List<TestQuery> queries = new ArrayList<>();

        // 5 –ó–ê–ü–†–û–°–û–í –ù–ê –ß–¢–ï–ù–ò–ï
        queries.add(new TestQuery(1, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
                "SELECT o.id AS \"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\", o.order_date AS \"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞\", " +
                        "c.first_name AS \"–ò–º—è\", c.last_name AS \"–§–∞–º–∏–ª–∏—è\", " +
                        "p.description AS \"–¢–æ–≤–∞—Ä\", o.quantity AS \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\", " +
                        "os.status_name AS \"–°—Ç–∞—Ç—É—Å\" " +
                        "FROM orders o " +
                        "JOIN customer c ON o.customer_id = c.id " +
                        "JOIN products p ON o.product_id = p.id " +
                        "JOIN order_status os ON o.status_id = os.id " +
                        "WHERE o.order_date >= CURRENT_DATE - INTERVAL '7 days' " +
                        "ORDER BY o.order_date DESC"));

        queries.add(new TestQuery(2, "–¢–æ–ø-3 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                "SELECT p.id, p.description, COUNT(o.id) as order_count " +
                        "FROM products p JOIN orders o ON p.id = o.product_id " +
                        "GROUP BY p.id, p.description ORDER BY order_count DESC LIMIT 3"));

        queries.add(new TestQuery(3, "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–æ–≤",
                "SELECT c.id, c.first_name, c.last_name, " +
                        "SUM(p.price * o.quantity) as total_spent " +
                        "FROM customer c JOIN orders o ON c.id = o.customer_id " +
                        "JOIN products p ON o.product_id = p.id " +
                        "GROUP BY c.id, c.first_name, c.last_name " +
                        "ORDER BY total_spent DESC"));

        queries.add(new TestQuery(4, "–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 10 –Ω–∞ —Å–∫–ª–∞–¥–µ",
                "SELECT p.description, p.quantity, p.category " +
                        "FROM products p WHERE p.quantity < 10 " +
                        "ORDER BY p.quantity ASC"));

        queries.add(new TestQuery(5, "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤",
                "SELECT EXTRACT(YEAR FROM order_date) as year, " +
                        "EXTRACT(MONTH FROM order_date) as month, " +
                        "COUNT(*) as order_count, " +
                        "SUM(p.price * o.quantity) as total_amount " +
                        "FROM orders o JOIN products p ON o.product_id = p.id " +
                        "GROUP BY year, month ORDER BY year, month"));

        // 3 –ó–ê–ü–†–û–°–ê –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–ï
        queries.add(new TestQuery(6, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ",
                "UPDATE products SET quantity = quantity - 1 WHERE id = 1"));

        queries.add(new TestQuery(7, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
                "UPDATE orders SET status_id = (SELECT id FROM order_status WHERE status_name = '–ó–∞–≤–µ—Ä—à–µ–Ω') " +
                        "WHERE id = 1"));

        queries.add(new TestQuery(8, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞",
                "UPDATE products SET price = price * 1.1 WHERE category = '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'"));

        // 2 –ó–ê–ü–†–û–°–ê –ù–ê –£–î–ê–õ–ï–ù–ò–ï (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
        queries.add(new TestQuery(9, "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
                "DELETE FROM orders WHERE quantity = 1 AND id > 15"));

        queries.add(new TestQuery(10, "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º",
                "DELETE FROM products WHERE quantity = 0"));

        return queries;
    }

    private static void executeSingleQuery(Connection connection, TestQuery query) {
        try (Statement statement = connection.createStatement()) {

            if (query.sql.toUpperCase().startsWith("SELECT")) {
                executeSelectQuery(statement, query.sql, query.number);
            } else {
                executeUpdateQuery(statement, query.sql, query.number);
            }

        } catch (Exception e) {
            printError("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ #" + query.number + ": " + e.getMessage());
        }
    }

    private static void executeSelectQuery(Statement statement, String query, int queryNumber) throws SQLException {
        try (ResultSet resultSet = statement.executeQuery(query)) {
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            List<String> headers = new ArrayList<>();
            List<Integer> columnWidths = new ArrayList<>();
            List<List<String>> allRows = new ArrayList<>();
            int rowCount = 0;

            while (resultSet.next()) {
                List<String> row = new ArrayList<>();
                for (int i = 1; i <= columnCount; i++) {
                    Object value = resultSet.getObject(i);
                    String stringValue;

                    if (value instanceof java.sql.Timestamp) {
                        // –û–±—Ä–µ–∑–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                        String dateString = value.toString();
                        if (dateString.length() > 19) {
                            dateString = dateString.substring(0, 19);
                        }
                        stringValue = dateString;
                    } else {
                        stringValue = value != null ? value.toString() : "NULL";
                    }

                    row.add(stringValue);
                }
                allRows.add(row);
                rowCount++;
            }

            for (int i = 1; i <= columnCount; i++) {
                String columnName = metaData.getColumnName(i);
                int maxWidth = columnName.length();
                for (List<String> row : allRows) {
                    maxWidth = Math.max(maxWidth, row.get(i-1).length());
                }
                headers.add(columnName);
                columnWidths.add(Math.max(maxWidth, 8) + 2);
            }

            printTable(headers, allRows, columnWidths);
            printSuccess("–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + rowCount);
        }
    }

    private static void executeUpdateQuery(Statement statement, String query, int queryNumber) throws SQLException {
        int affectedRows = statement.executeUpdate(query);
        if (query.toUpperCase().startsWith("UPDATE")) {
            printSuccess("–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + affectedRows);
        } else if (query.toUpperCase().startsWith("DELETE")) {
            printSuccess("–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + affectedRows);
        } else {
            printSuccess("–í—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: " + affectedRows);
        }
    }

    private static void printTable(List<String> headers, List<List<String>> rows, List<Integer> widths) {
        printTableBorder("‚îå", "‚î¨", "‚îê", widths);

        StringBuilder headerLine = new StringBuilder("‚îÇ");
        for (int i = 0; i < headers.size(); i++) {
            headerLine.append(" ").append(padCenter(headers.get(i), widths.get(i))).append(" ‚îÇ");
        }
        System.out.println(headerLine);

        printTableBorder("‚îú", "‚îº", "‚î§", widths);

        for (List<String> row : rows) {
            StringBuilder dataLine = new StringBuilder("‚îÇ");
            for (int i = 0; i < row.size(); i++) {
                dataLine.append(" ").append(padRight(row.get(i), widths.get(i))).append(" ‚îÇ");
            }
            System.out.println(dataLine);
        }

        printTableBorder("‚îî", "‚î¥", "‚îò", widths);
    }

    private static void printTableBorder(String left, String middle, String right, List<Integer> widths) {
        StringBuilder border = new StringBuilder(left);
        for (int i = 0; i < widths.size(); i++) {
            border.append("‚îÄ".repeat(widths.get(i) + 2));
            border.append(i < widths.size() - 1 ? middle : right);
        }
        System.out.println(border);
    }

    private static String padRight(String s, int length) {
        return s.length() > length ? s.substring(0, length - 3) + "..." :
                String.format("%-" + length + "s", s);
    }

    private static String padCenter(String s, int length) {
        if (s.length() >= length) return s.substring(0, length);
        int padding = length - s.length();
        return " ".repeat(padding / 2) + s + " ".repeat(padding - padding / 2);
    }

    private static void printHeader(String text) {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("‚ú® " + text);
        System.out.println("=".repeat(80));
    }

    private static void printQueryHeader(int number, String description) {
        System.out.println("\n" + "‚îÄ".repeat(80));
        System.out.println("üìå –ó–ê–ü–†–û–° #" + number + ": " + description);
        System.out.println("‚îÄ".repeat(80));
    }

    private static void printSeparator() {
        System.out.println("‚îÄ".repeat(80));
    }

    private static void printSuccess(String text) {
        System.out.println("‚úÖ " + text);
    }

    private static void printInfo(String text) {
        System.out.println("‚ÑπÔ∏è " + text);
    }

    private static void printError(String text) {
        System.out.println("‚ùå " + text);
    }

    private static class TestQuery {
        int number;
        String description;
        String sql;

        TestQuery(int number, String description, String sql) {
            this.number = number;
            this.description = description;
            this.sql = sql;
        }
    }
}